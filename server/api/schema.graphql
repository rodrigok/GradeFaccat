scalar JSON

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Email {
  address: String
  verified: Boolean
}

type UserProfile {
  course: Course
}

type User {
  _id: String
  mainEmail: Email
  admin: Boolean
  emails: [Email]
  grade: JSON
  calendar: JSON
  profile: UserProfile
}

type FacebookUser {
  id: String
  name: String
  pictureUrl: String
}

type Teacher {
  _id: String
  name: String
}

type CalendarItem {
  _id: String
  day: String
  shift: String
  interested: Float
  teacher: Teacher
  grade (course: String): Grade
  userStatus: String
  userInterested: Boolean
  friendsInterested: [FacebookUser]
}

type Calendar {
  _id: String
  name: String
  active: Boolean
  grade: [CalendarItem]
}

type Grade {
  _id: String
  semester: String
  code: String
  name: String
  requirement: [Grade]
  description: String
  credit: Float
  workload: Float
  allNames: [String]
  userStatus: String
}

type Course {
  _id: String
  name: String
  elective: Float
}

type Query {
  user(userId: String): User
  teachers: [Teacher]
  calendar: Calendar
  calendars: [Calendar]
  grades(userId: String): [Grade]
  courses: [Course]
}

# Type returned when the user logs in
type LoginMethodResponse {
  # Id of the user logged in user
  id: String!
  # Token of the connection
  token: String!
  # Expiration date for the token
  tokenExpires: Float!
  # The logged in user
  user: User
}

input CreateUserProfileInput {
  name: String
}

type SuccessResponse {
  # True if it succeeded
  success: Boolean
}

# A hashsed password
input HashedPassword {
  # The hashed password
  digest: String!
  # Algorithm used to hash the password
  algorithm: String!
}

type Mutation {
  updateGradeItem(
      _id: String!
      status: String!
  ): User

  updateCalendarItemInterest(
    calendarId: String!
    gradeItemId: String!
    shift: String!
    day: String!
    interested: Boolean!
  ): Boolean

  setTeacherInCalendarItem(
    calendarId: String!
    gradeItemId: String!
    shift: String!
    day: String!
    teacherId: String!
  ): Boolean

  removeItemFromCalendar(
    calendarId: String!
    gradeItemId: String!
    shift: String!
    day: String!
  ): Boolean

  addItemToCalendar(
    calendarId: String!
    gradeItemId: String!
    shift: String!
    day: String!
  ): Boolean

  createTeacher(
    name: String!
  ): Teacher

  updateTeacher(
    _id: String!
    name: String!
  ): Teacher

  removeTeacher(
    _id: String!
  ): Boolean

  createCourse(
    name: String!
    elective: Float!
  ): Course

  updateCourse(
    _id: String!
    name: String!
    elective: Float!
  ): Course

  removeCourse(
    _id: String!
  ): Boolean

  createCalendar(
    name: String!
  ): Calendar

  updateCalendar(
    _id: String!
    name: String!
  ): Calendar

  removeCalendar(
    _id: String!
  ): Boolean

  activateCalendar(
    _id: String!
    active: Boolean!
  ): Boolean

  signup(
    email: String!
    course: String!
    password: String!
  ): SignupResult

  login(
    email: String!
    password: String!
  ): LoginResult

  setCourse(
    course: String!
  ): Boolean

  # Log the user in with a password.
  loginWithPassword (username: String, email: String, password: HashedPassword, plainPassword: String): LoginMethodResponse
  # Create a new user.
  createUser (username: String, email: String, password: HashedPassword, plainPassword: String, profile: CreateUserProfileInput): LoginMethodResponse
  # Change the current user's password. Must be logged in.
  changePassword (oldPassword: HashedPassword!, newPassword: HashedPassword!): SuccessResponse
  # Request a forgot password email.
  forgotPassword (email: String!): SuccessResponse
  # Reset the password for a user using a token received in email. Logs the user in afterwards.
  resetPassword (newPassword: HashedPassword!, token: String!): LoginMethodResponse
  # Log the user out.
  logout (token: String!): SuccessResponse
  # Marks the user's email address as verified. Logs the user in afterwards.
  verifyEmail (token: String!): LoginMethodResponse
  # Send an email with a link the user can use verify their email address.
  resendVerificationEmail (email: String): SuccessResponse
  # Login the user with a facebook access token
  loginWithFacebook (accessToken: String!): LoginMethodResponse
}

type SignupResult {
  success: Boolean
}

type LoginResult {
  success: Boolean
  token: String
  tokenExpires: String
}

type Subscription {
  grade: Grade
}
